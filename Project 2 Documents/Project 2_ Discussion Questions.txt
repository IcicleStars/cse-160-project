Design Questions
1. Why do we use a link for the shortest path computation only if it exists in our database in both directions? What would happen if we used a directed link AB when the link BA does not exist? 
The rule of requiring bidirectional confirmation prevents nodes from basing their routing tables on links that cannot support two-way traffic, leading to a more stable and functional network. For the second question, this will result in a communication failure because the packet reaches the destination, but the sender does not receive an acknowledgement back that the data was received successfully from the receiver. 


2. Does your routing algorithm produce symmetric routes (that follow the same path from X to Y in reverse when going from Y to X)? Why or why not? 
Our routing algorithm operates symmetrically, following the same path from X to Y in reverse, assuming that neighbors don’t change during this process. This is because our links are bidirectional, so the shortest path between two nodes should be the same path, no matter which node is traveling to which node.


3. What would happen if a node advertised itself as having neighbors, but never forwarded packets? How might you modify your implementation to deal with this case? 
If a node A chooses a path that node M is on, where node M is a node advertised itself as having neighbors, but never forwarded packets, then all traffic attempting to use node M is lost and it can potentially break a large portion of the network if node M lies on many shortest paths. We can modify our implementation to deal with this case by shortening the timeout of the qualityCheckTimer in NeighborDiscoveryP because this makes the system more sensitive to missing packets, forcing the network to drop a link to a black hole faster. Another way we can modify our implementation is by increasing the sensitivity of the link quality calculation so that if the link quality degrades quickly, the node will be dropped from the routing table. 


4. What happens if link-state packets are lost or corrupted? 
If link-state packets are lost or corrupted, they may impact the IP packets and cause them to flood the topology just as the link-state packets were originally supposed to do. This may also cause overflow in other packets, causing similar issues where data like the destination, source, or payload are altered. 


5. What would happen if a node alternated between advertising and withdrawing a neighbor, every few milliseconds? How might you modify your implementation to deal with this case?
If a node alternated between advertising and withdrawing a neighbor every few milliseconds, this would cause severe instability across the network. This high rate of changes forces every other node to calculate the shortest path, leading to high latency and dropped packets due to the computational resources and network bandwidth being taken up by the alternating node. We can modify our code by adding a stabilization timer that makes it so that the network only reacts when changes persist, which filters out the rapid “flapping” that a node can do.